% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SamplingFunctions.R
\name{build_strata_ors}
\alias{build_strata_ors}
\title{Determine strata oversampling odds ratios to use in build_sample_plan()}
\usage{
build_strata_ors(
  n_samp,
  N_bystrata,
  drop_unif = F,
  drop_weight = NULL,
  drop_grad = 1,
  control = list(maxit = 1000)
)
}
\arguments{
\item{n_samp:}{a three element vector (if specifying marginal outcome strata sampling goal)}

\item{N_bystrata:}{matrix of outcome by dropout counts. dimensions must be named}

\item{drop_grad:}{numeric scalar. a value of zero will indicate proportional sampling across the dropout strata. a non-zero value is a slope (expressed as an odds ratio to adjust the sampling gradient across dropout strata).}

\item{drop_unif:}{(T/F) if true then include the drop_grad as a parameter to optimize seeking a uniform sample (marginally) over the dropout strata}

\item{drop_weight:}{a vector of weights equivalent to the expected number of longitudinal measures per participant in the equivalent ordered dropout strata. this is only used when drop_unit = T and it is desired to balance the number of person-measures across dropout time}
}
\value{
A object from the R optim function with par representing the estimated vector of log-odds parameters to transform the sampling probabilities for the ODS sample. Intended as input to the argument of the build_sample_plan() function.
}
\description{
Accepts desired sample size across marginal outcome strata and a matrix of outcome and dropout stratum counts
as well as desired adjustment to the sampling gradient across the dropout strata. Returns the
appropriate odds ratio oversampling for the outcome strata to be used in build_sample_plan().
The return value is a result object from the optim function.
}
\examples{
set.seed(957385)
dat = simuDat(
  B = c(-3, 2, 6, 2, 0),
  G = matrix(c(4), ncol = 1),
  random = NULL,
  p_exposed = 0.5,
  p_confounder = 0.25,
  conf = 0,
  N = 1000,
  M = 5,
  D_B = c(0, -2, -1, -0.5, 0),
  D_F = c(1, 1, 1, 1, 1),
  D_parms = c(1, 1)
) 
mdat <- subset(dat, time <= dtime)

s_frame <- build_sample_frame(data = mdat, study_id = 'id', outcome = 'y', drop_strata = 'dtime')

s_or_plan <- build_strata_ors(n_samp = c(50, 200, 50), N_bystrata = s_frame$strata_counts, drop_grad = 1)

s_plan <- build_sample_plan(n_samp = 300, N_bystrata = s_frame$strata_counts, oc_sample_adj = s_or_plan$par, drop_grad = 1)

s_sample <- strat_samp(s_frame$sample_frame,oc_strata = 'oc_strata', drop_strata = 'dtime', sample_plan=s_plan$sample_plan,sample_by = 'n')
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SamplingFunctions.R
\name{build_sample_plan}
\alias{build_sample_plan}
\title{BUILD sample plan}
\usage{
build_sample_plan(
  n_samp,
  N_bystrata,
  oc_sample_adj = c(NA, 1, 1),
  drop_grad = 1
)
}
\arguments{
\item{n_samp:}{a scalar (if only specifying total desired sample size), or three element vector (if specifying marginal outcome strata sampling goal)}

\item{N_bystrata:}{a matrix of outcome by dropout counts. dimensions must be named}

\item{oc_sample_adj:}{a numeric vector of dim 3. Specified only if a scalar sample size is specified. Amount to adjust the observed outcome strata proportions expressed as an odds increase in the sampling proportion of the stratum. All three may be specified and the result is standardised to the sample size requested in 'n_samp'.}

\item{drop_grad:}{numeric scalar. a value of zero will indicate proportional sampling across the dropout strata. a non-zero value is a slope (expressed as an odds ratio to adjust the sampling gradient across dropout strata).}
}
\value{
A list of three elements:
\enumerate{
\item sample_plan: a dataframe of all possible outcome and dropout strata (oc_strata, drop_strata), the number to sample from each combination (n), the total number in the population (n_population) and the resulting sampling probability (p)
\item P_matrix: a matrix of sampling probabilities for that combination of outcome strata (row) and dropout strata (column).
N) N_sample: a matrix of sample sizes for that combination of outcome strata (row) and dropout strata (column).
}
}
\description{
Accepts desired sample size and a matrix of outcome and dropout stratum counts
along with specification for stratum oversampling and outputs a dataframe with the
needed stratum sampling numbers for the sampling function
}
\examples{
set.seed(957385)
dat = simuDat(
  B = c(-3, 2, 6, 2, 0),
  G = matrix(c(4), ncol = 1),
  random = NULL,
  p_exposed = 0.5,
  p_confounder = 0.25,
  conf = 0,
  N = 1000,
  M = 5,
  D_B = c(0, -2, -1, -0.5, 0),
  D_F = c(1, 1, 1, 1, 1),
  D_parms = c(1, 1)
) 
mdat <- subset(dat, time <= dtime)

s_frame <- build_sample_frame(data = mdat, study_id = 'id', outcome = 'y', drop_strata = 'dtime')

s_plan <- build_sample_plan(n_samp = c(50, 200, 50), N_bystrata = s_frame$strata_counts, drop_grad = 1)

s_sample <- strat_samp(s_frame$sample_frame,oc_strata = 'oc_strata', drop_strata = 'dtime', sample_plan=s_plan$sample_plan,sample_by = 'n')
}
